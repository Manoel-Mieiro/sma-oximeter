{"id":11,"name":"oximeter","agents":[{"archClass":"jason.Argo","name":"monitor","sourceCode":"/* beliefs and rules */\n/* serialPort(ttyUSB0). */\n/* serialPort(ttyEmulatedPort0). */\n\nserialPort(ttyUSB0).\n\n/* Initial goals */\n!connect.\n\n/* Achievement Plans */\n\n+!connect: \nserialPort(Port) <- \n\t.argo.port(Port); \n\t.argo.limit(500); \n\t.argo.percepts(open).\n\n+!infoLCD(M)  <- .argo.act(M).\n+!yellowAlert <- .argo.act(yellowOn).\n+!greenAlert  <- .argo.act(greenOn).\n+!redAlert    <- .argo.act(redOn).\n+!blueAlert   <- .argo.act(blueOn).\n\n/* Belief Plans */\n+device(D): \nD = arduinoWithLCDKeypadShield <- \n\t.my_name(N); \n\t.concat(N,\" is online!\",LCDMessage);\n\t!infoLCD(LCDMessage);\n\t.wait(1000);\n\t!redAlert.\n\n+port(Port,Status):\nStatus = off | Status = timeout <-\n\t.argo.percepts(close);\n\t.print(\"Serial port \",Port,\" is \",Status);\n\t.print(\"Stopping the MAS\");\n\t.stopMAS.\n\n+spo2Rate(S) <- .wait(10000);\n\t\t.print(\"New perception-> SPo2 rate's: \",S,\" %\");\n\t\t.wait(2000);\n\t\t.print(\"Enviando taxa para processador...\");\n\t\t.wait(2000);\n\t\t.send(processador, tell, S);\n\t\t.wait(2000);\n\t\t.print(\"Saturacao eviada com sucesso.\"). "},{"archClass":"Jason","name":"processador","sourceCode":"/* Initial beliefs and rules */\n\n/* Initial goals */\n\n/* Plans */\n\n/* Aqui e recebida a percept de SPo2 vindo do monitor e adiciona spo2 a base de beliefs*/\n+!kqml_received(Sender, tell, S, MsgId) <- \n                                .print(\"Taxa SPo2 recebida de \", Sender, \": \", S, \"%\");\n                                /* Belief Update */\n    \t\t\t\t-spo2(processador, _);   \n                                +spo2(processador, S);   \n\t\t\t\t.wait(4000);\n\t\t\t\t!saturationAssess;\n\t\t\t\t.print(\"Aguardando diagnostico...\");\n\t\t\t\t.wait(6000);\n\t\t\t\t!notifyNet.\n\n/*\nValores de SpO2 \n97-99%: Bom nivel de oxigenio no sangue\n94-96%: Nivel medio de oxigenio no sangue\n90-93%: Baixo nivel de oxigenio no sangue\nAbaixo de 92%: Sinais de insuficiencia respiratoria muito grave\nAbaixo de 90%: Indicativo de emergencia medica\n*/\n\n/*  Classificando o SPO2  */\n\n+!saturationAssess \n    : spo2(processador, S) & S >= 97  <- \n    .print(\"SpO2: \", S, \"%. Status: NORMAL - Bom nivel de oxigenio no sangue.\");\n    -statusSaturation(_);\n    +statusSaturation(\"NORMAL\").\n\n+!saturationAssess\n    : spo2(processador, S) & S >= 92 & S < 97 <- \n    .print(\"SpO2: \", S, \"%. Status: ALERTA - Nivel medio de oxigenio no sangue.\");\n    -statusSaturation(_);\n    +statusSaturation(\"ALERTA\").\n    \n+!saturationAssess \n    : spo2(processador, S) & S < 92 <- \n    .print(\"SpO2: \", S, \"%. Status: CRITICO - Emergencia medica!\");\n    -statusSaturation(_);\n    +statusSaturation(\"CRITICO\").\n\n\n+!notifyNet: statusSaturation(ST) & ST = \"CRITICO\" <- \n.print(\"EMERGENCIA! Notificando rede de apoio...\");\n.wait(2000);\n.send(mensageiro, tell, ST).\n    \n+!notifyNet: statusSaturation(ST) & ST = \"ALERTA\" <- \n.print(\"O quadro de alerta. Manter em observacao.\").\n\n+!notifyNet: statusSaturation(ST) & ST = \"NORMAL\" <- \n.print(\"Paciente esta com niveis normais de SPo2 no sangue. Manter em observacao.\").\n\n-!notifyNet <- .print(\"Falha ao executar notifyNet\")."},{"archClass":"Jason","name":"mensageiro","sourceCode":"/* Initial beliefs and rules */\nnetwork([\"Lucy Steel\", \"Diego Brando\", \"Funny Valentine\", \"Gyro Zepelli\"]).\npatient(\"Jonny Joestar\").\n\n+!kqml_received(Sender, tell, ST, MsgId) <- \n    .print(\"Quadro de gravidade \", ST, \" recebido de \", Sender);\n    .print(\"Adicionando severidade do caso a base de beliefs...\");\n    .wait(2000);\n    +severity(ST);\n    .print(\"Severidade Armazenada! Notificando rede de apoio...\");\n    ?network(List);\n    ?patient(Patient);   // Adiciona uma consulta para obter o paciente\n    !alertNet(List, Patient).\n\n+!alertNet([], P) <- \n    .print(\"Rede de apoio completamente notificada!\").\n\n+!alertNet([Member | Left], P) <- \n    .print(Member, \", favor procurar pelo paciente \", P);\n    .print(\"Caso confirmado de hipoxemia\");\n    !alertNet(Left, P).\n"}],"firmwares":[{"name":"lcdKeypad","sourceCode":"#include <Javino.h>         //https://github.com/chon-group/javino2arduino\n#include <LiquidCrystal.h>  //https://www.arduino.cc/reference/en/libraries/liquidcrystal/\n\n// When using a physical arduino boar with the LCD Keypad Shield, uncomment the following:\n  #define PinLCDCtrl01 4\n  #define PinLCDCtrl02 5\n  #define PinLCDCtrl03 6\n  #define PinLCDCtrl04 7\n  #define PinLCDRS     8\n  #define PinLCDEN     9\n  #define PinLCDLight  10\n  #define LedBlue       3  \n  #define LedRed       11\n  #define LedYellow    12\n  #define LedGreen     13\n\n\nJavino javino;\nLiquidCrystal lcd(PinLCDRS, PinLCDEN, PinLCDCtrl01, PinLCDCtrl02, PinLCDCtrl03, PinLCDCtrl04);\nunsigned long lastClick = millis();\nString strBtnPressed = \"\";\nString lastLCDMsg = \"\";\nint option = 0;\nint spo2=98;\n\nvoid serialEvent(){\n  javino.readSerial();\n}\n\nvoid setup() {\n pinMode(LedBlue,OUTPUT); \n pinMode(LedRed,OUTPUT);\n pinMode(LedGreen,OUTPUT);\n pinMode(LedYellow,OUTPUT);\n startLCDWithKeyboard();\n javino.start(9600);\n}\n \nvoid loop() {\n readLCDKeyboard();\n if(javino.availableMsg()){\n  if(javino.requestPercepts()) getExogenousPerceptions();\n  else if(javino.requestAction(\"blueOn\")) led(\"blueOn\");\n  else if(javino.requestAction(\"redOn\")) led(\"redOn\");\n  else if(javino.requestAction(\"yellowOn\")) led(\"yellowOn\");\n  else if(javino.requestAction(\"greenOn\")) led(\"greenOn\");\n  else if(javino.requestAction(\"blueOff\")) led(\"blueOff\");\n  else if(javino.requestAction(\"redOff\")) led(\"redOff\");\n  else if(javino.requestAction(\"yellowOff\")) led(\"yellowOff\");\n  else if(javino.requestAction(\"greenOff\")) led(\"greenOff\");  \n  else information(javino.getMsg());\n }\n}\n\nvoid information(String info){\n    lastLCDMsg = \"\";\n    lcd.clear();\n    writeInLCD(info);\n}\n\nvoid getExogenousPerceptions(){\n    javino.addPercept(\"device(arduinoWithLCDKeypadShield)\");\n    javino.addPercept(\"spo2Rate(\"+String(spo2)+\")\");\n    javino.sendPercepts();\n}\n\nvoid startLCDWithKeyboard(){\n  pinMode(PinLCDLight, OUTPUT);\n  digitalWrite(PinLCDLight, HIGH);\n  lcd.begin(16, 2);\n  printScreen();\n }\n\nvoid readLCDKeyboard(){ \n  strBtnPressed = getBtnPressed();\n  if((strBtnPressed != \"none\" ) & (millis()>(lastClick+500))){\n\n      lastClick = millis();\n\n      if(strBtnPressed == \"select\") option=0;\n      else if(strBtnPressed == \"down\") option++;\n      else if(strBtnPressed == \"up\") option--;\n      printScreen();\n      \n  }\n  delay(50);\n}\n\n\nvoid printScreen(){\n  if(option<=0){\n    writeInLCD(\"Oximeter\");\n    writeInLCD(\" \");\n    option=0;\n  } else if(option==1){\n    static int lastSpo2 = -1;  // ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âºltimo valor exibido de spo2\n\n    if(strBtnPressed==\"right\" && spo2 < 99) spo2++;\n    if(strBtnPressed==\"left\" && spo2 > 0) spo2--;\n\n    if(spo2 != lastSpo2) {  \n      lcd.clear();\n      writeInLCD(\"Saturation Rate\");\n      writeInLCD(String(spo2) + \"%\");\n      lastSpo2 = spo2;  // Atualiza o ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âºltimo valor\n    }\n  }\n}\n\n\n\nString getBtnPressed(){\n    int input = analogRead(A0);\n    if     (input < 50) { return \"right\";}\n    else if(input < 150){ return \"up\";}\n    else if(input < 350){ return \"down\";}\n    else if(input < 550){ return \"left\";}\n    else if(input < 750){ return \"select\";}\n    else return \"none\"; \n}\n\n\nvoid writeInLCD(String strL){\n  if (strL.startsWith(\"\\\"\") && strL.endsWith(\"\\\"\")) {\n    strL.remove(0, 1);\n    strL.remove(strL.length() - 1); \n  }\n\n  int lengthStr = strL.length();\n  for (int startIndex = 0; startIndex < lengthStr; startIndex += 16) {\n    int endIndex = startIndex + 15;\n    if (endIndex >= lengthStr) {\n      endIndex = lengthStr - 1;\n    }\n    String chunk = strL.substring(startIndex, endIndex + 1);\n    digitalWrite(PinLCDLight, HIGH);\n    lcd.clear();\n    lcd.setCursor(0,0);\n    lcd.print(lastLCDMsg);\n    lcd.setCursor(0,1);\n    lcd.print(chunk);\n    lastLCDMsg = chunk;\n  }\n}\n\nvoid led(String op){\n  if(op==\"greenOff\"){\n    digitalWrite(LedGreen,LOW);\n  }else if(op==\"yellowOff\"){\n    digitalWrite(LedYellow,LOW);\n  }else if(op==\"redOff\"){\n    digitalWrite(LedRed,LOW);  \n  }else if(op==\"blueOff\"){\n    digitalWrite(LedBlue,LOW);\n  }else if(op==\"greenOn\"){\n    digitalWrite(LedGreen,HIGH);\n  }else if(op==\"yellowOn\"){\n    digitalWrite(LedYellow,HIGH);\n  }else if(op==\"redOn\"){\n    digitalWrite(LedRed,HIGH);\n  }else if(op==\"blueOn\"){\n    digitalWrite(LedBlue,HIGH);\n  }\n}"}]}